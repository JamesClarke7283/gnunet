#!/bin/sh
#
# We should use /usr/bin/env sh, but some systems are notoriously picky.
# In fact we could omit this line if some automations wouldn't rely on
# running this file via ./bootstrap.
#
# This file is in the public domain.
# SPDX-License-Identifier: 0BSD
#
# We can't set -eu because we encounter warnings which
# result in stops, whereas the warnings can for now be
# safely ignored.
# set -eu

cleanup()
{
    echo "Removing folder 'libltdl'..."
    rm -rf libltdl
}

errmsg=''

# Check if shell supports builtin 'type'.
if test -z "$errmsg"; then
    if ! (eval 'type type') >/dev/null 2>&1
    then
        errmsg='Shell does not support type builtin'
        exit 1
    fi
fi

# This is more portable than `which' but comes with
# the caveat of not(?) properly working on busybox's ash:
existence()
{
    type "$1" >/dev/null 2>&1
}

check_uncrustify()
{
    if existence uncrustify; then
        echo "Installing uncrustify hook and configuration"
        ln -fs $(pwd)/contrib/conf/uncrustify.cfg uncrustify.cfg 2> /dev/null
        ln -fs $(pwd)/contrib/conf/uncrustify_precommit .git/hooks/pre-commit 2> /dev/null
    else
        echo "Uncrustify not detected, hook not installed."
        echo "Please install uncrustify if you plan on doing development"
    fi
}

# yapf can be a suffixed binary, don't change the essential logic
# of this if you change it.
check_yapf()
{
    if existence yapf || \
       existence yapf3.0 || \
       existence yapf3.1 || \
       existence yapf3.2 || \
       existence yapf3.3 || \
       existence yapf3.4 || \
       existence yapf3.5 || \
       existence yapf3.6 || \
       existence yapf3.7 || \
       existence yapf3.8 || \
       existence yapf3.9 || \
       existence yapf4.0; then
        echo "Installing yapf symlink"
        ln -fs contrib/conf/.style.yapf .style.yapf 2> /dev/null
    else
        echo "yapf not detected, please install yapf if you plan on contributing python code"
    fi
}

check_libtool()
{
    echo "checking for libtoolize / libtool... "

    if existence libtool || \
       existence libtoolize || \
       existence glibtoolize || \
       existence slibtool; then
        autoreconf -if || exit 1
        . "bin/pogen.sh" || exit 1
    else
        echo "*** No libtoolize (libtool) or libtool found, please install it ***" >&2;
        exit 1
    fi
}

submodules()
{
    # Try to update the submodule. Since bootstrap
    # is also invoked by distributors, we must
    # ignore any failing of this function as we
    # could have no outgoing network connection
    # in a restricted environment.
    if ! git --version >/dev/null; then
        echo "git not installed, skipping submodule update"
    else
        git submodule update --init --recursive && \
        git submodule sync --recursive
    fi
}

sphinx_update()
{
    echo "Updating handbook..."
    if existence sphinx-build; then
      cwd=$PWD
      cd src/handbook || exit 1
      if test -e _build; then
        make clean
      fi
      # GNS
      make html >/dev/null || exit 1
      if test -e ../../doc/handbook/html; then
        rm -r ../../doc/handbook/html || exit 1
      fi
      cp -r _build/html ../../doc/handbook/ || exit 1
      if test -e ../../doc/handbook/texinfo; then
        rm -r ../../doc/handbook/texinfo || exit 1
      fi
      make info >/dev/null || exit 1
      cp -r _build/texinfo ../../doc/handbook/ || exit 1
      cd $cwd
    else
      echo "ERROR: Sphinx not found! Unable to generate recent documentation."
      exit 1
    fi
}


gana_update()
{
    if [ ! -z $GNUNET_SKIP_GANA ]; then
      echo "Skipping GANA update"
      return
    fi
    echo "Updating GANA..."
    if existence recfmt; then
      cwd=$PWD
      cd src/gana || exit 1
      # GNS
      echo "Updating GNS record types"
      cd gnu-name-system-record-types && \
         make >/dev/null && \
         cp gnu_name_system_record_types.h ../../../src/include/ || exit 1
      echo "Creating default TLDs"
      cd ../gnu-name-system-default-tlds && \
         make >/dev/null && \
         cp tlds.conf ../../../src/gns || exit 1

      # Signatures
      echo "Updating GNUnet signatures"
      cd ../gnunet-signatures && \
         make >/dev/null && \
         cp gnunet_signatures.h ../../../src/include || exit 1
      # DHT Block Types
      echo "Updating DHT record types"
      cd ../gnunet-dht-block-types && \
         make >/dev/null && \
         cp gnunet_dht_block_types.h ../../../src/include || exit 1
      echo "Generating GNUnet error types"
      cd ../gnunet-error-codes && \
         make >/dev/null && \
         cp gnunet_error_codes.h ../../../src/include && \
         cp gnunet_error_codes.c ../../../src/lib/util || exit 1
      cd $cwd
    else
      echo "ERROR: No recutils found! Unable to generate recent GANA headers and configs."
      exit 1
    fi
    echo "GANA finished"
}

install_hooks()
{
  ln -fs $(pwd)/contrib/conf/prepare-commit-msg .git/hooks/prepare-commit-msg 2> /dev/null
  ln -fs $(pwd)/contrib/conf/commit-msg .git/hooks/commit-msg 2> /dev/null
}

main()
{
    cleanup
    submodules
    gana_update
    sphinx_update
    check_uncrustify
    check_yapf
    check_libtool
    install_hooks
}

main "$@"
